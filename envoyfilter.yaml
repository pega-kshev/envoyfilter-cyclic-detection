apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: detect-cycles
  namespace: default
spec:
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: SIDECAR_INBOUND
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.filters.http.lua
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
            inlineCode: |
              local cache = {}
              local max_size = 100
              local order = {}
              
              local function set(key, value)
                if #order >= max_size then
                  local oldest_key = table.remove(order, 1)
                  cache[oldest_key] = nil
                end
                cache[key] = value
                table.insert(order, key)
              end
              
              local function get(key)
                for i, k in ipairs(order) do
                  if k == key then
                    table.remove(order, i)
                    table.insert(order, key)
                    return cache[key]
                  end
                end
                return nil
              end
              
              function envoy_on_request(request_handle)
                local headers = request_handle:headers()
                local trace_id = headers:get("x-b3-traceid")
                -- Return early if trace_id is nil or empty
                if not trace_id or trace_id == "" then
                    return
                end
                local method = headers:get(":method")
                local uri = headers:get(":path")
                local key = method .. uri .. trace_id
                local current_time = os.time()
              
                local data = get(key)
                if not data then
                  data = {count = 0, timestamp = current_time}
                  set(key, data)
                end
              
                data.timestamp = current_time
                data.count = data.count + 1
              
                if data.count > 5 then
                  request_handle:respond(
                    {
                      [":status"] = "429"
                    },
                    "Too Many Requests"
                  )
                end
              end