static_resources:
  listeners:
    - name: listener_0
      address:
        socket_address: { address: 0.0.0.0, port_value: 8080 }
      filter_chains:
        filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: AUTO
              stat_prefix: ingress_http
              route_config:
                name: local_route
                virtual_hosts:
                  - name: backend
                    domains: ["*"]
                    routes:
                      - match: { prefix: "/" }
                        route:
                          cluster: servicea
              http_filters:
                - name: envoy.filters.http.lua
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                    inlineCode: |
                      local cache = {}
                      local max_size = 100
                      local order = {}
                      
                      local function set(key, value)
                        if #order >= max_size then
                          local oldest_key = table.remove(order, 1)
                          cache[oldest_key] = nil
                        end
                        cache[key] = value
                        table.insert(order, key)
                      end
                      
                      local function get(key)
                        for i, k in ipairs(order) do
                          if k == key then
                            table.remove(order, i)
                            table.insert(order, key)
                            return cache[key]
                          end
                        end
                        return nil
                      end
                      
                      function envoy_on_request(request_handle)
                        local headers = request_handle:headers()
                        local trace_id = headers:get("x-b3-traceid")
                        -- Return early if trace_id is nil or empty
                        if not trace_id or trace_id == "" then
                            return
                        end
                        local method = headers:get(":method")
                        local uri = headers:get(":path")
                        local key = method .. uri .. trace_id
                        local current_time = os.time()
                      
                        local data = get(key)
                        if not data then
                          data = {count = 0, timestamp = current_time}
                          set(key, data)
                        end
                      
                        data.timestamp = current_time
                        data.count = data.count + 1
                      
                        if data.count > 5 then
                          request_handle:respond(
                            {
                              [":status"] = "429"
                            },
                            "Too Many Requests"
                          )
                        end
                      end

                - name: envoy.filters.http.router
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
  clusters:
    - name: servicea
      connect_timeout: 0.25s
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: servicea
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: servicea
                      port_value: 8080